-- 1. Simple SELECT INTO Statement

-- DECLARE
--     emp_name VARCHAR2(50);
-- BEGIN
--     SELECT first_name INTO emp_name FROM HR.employees WHERE employee_id = 101;
--     DBMS_OUTPUT.PUT_LINE('Employee Name: ' || emp_name);
-- END;
-- /

-- 2. SELECT Multiple Columns INTO Variables

-- DECLARE
--     emp_name VARCHAR2(50);
--     emp_salary NUMBER;
-- BEGIN
--     select first_name, salary into emp_name, emp_salary from hr.employees where EMPLOYEE_ID=102;
--     DBMS_output.PUT_LINE ('Employee: ' ||emp_name ||', salary :' || emp_salary);
-- END;

-- 3. Handling No Data Found Exception

-- DECLARE
--    emp_salary number;
-- BEGIN
--     BEGIN
--         SELECT salary into emp_salary from hr.employees where employee_id =999;
--         DBMS_OUTPUT.PUT_LINE('salary:' || emp_salary);
--     Exception
--         when no_data_found then
--         DBMS_OUTPUT.PUT_LINE (' No Employee found with this ID');
--     END;
-- END;

--4. Using SELECT with CASE Statement

-- DECLARE
--     emp_status VARCHAR2(20);
-- BEGIN
--     SELECT
--         CASE 
--             WHEN salary > 1000 THEN 'High Salary'
--             ELSE 'Low Salary'
--         END 
--     INTO emp_status 
--     FROM HR.employees WHERE employee_id = 103;
    
--     DBMS_OUTPUT.PUT_LINE('Employee Status: ' || emp_status);
-- END;

-- 5. Using COUNT() with SELECT INTO

-- DECLARE
--     total_employees NUMBER;
-- BEGIN
--     SELECT COUNT(*) INTO total_employees FROM HR.employees;
--     DBMS_OUTPUT.PUT_LINE('Total Employees: ' || total_employees);
-- END;
-- /

-- 6. Fetching MAX Salary

-- DECLARE
--     max_salary NUMBER;
-- BEGIN
--     SELECT MAX(salary) INTO max_salary FROM HR.employees;
--     DBMS_OUTPUT.PUT_LINE('Highest Salary: ' || max_salary);
-- END;
-- /

-- 7. Fetching MIN Salary

-- DECLARE
--     min_salary NUMBER;
-- BEGIN
--     SELECT MIN(salary) INTO min_salary FROM HR.employees;
--     DBMS_OUTPUT.PUT_LINE('Lowest Salary: ' || min_salary);
-- END;
-- /

-- 8. Fetching AVG Salary

-- DECLARE
--     avg_salary NUMBER;
-- BEGIN
--     SELECT AVG(salary) INTO avg_salary FROM HR.employees;
--     DBMS_OUTPUT.PUT_LINE('Average Salary: ' || avg_salary);
-- END;
-- /

-- 9. Fetching Employee Name Using Subquery

-- DECLARE
--     emp_name VARCHAR2(50);
-- BEGIN
--     SELECT first_name INTO emp_name FROM HR.employees 
--     WHERE employee_id =(SELECT MIN(employee_id) FROM HR.employees);
--     DBMS_OUTPUT.PUT_LINE('First Employee: ' || emp_name);
-- END;
-- /

-- 10. Fetching Data Using EXISTS

-- DECLARE
--     emp_exists VARCHAR2(10);
-- BEGIN
--     SELECT 
--         CASE 
--             WHEN EXISTS (SELECT 1 FROM HR.employees WHERE employee_id = 105) THEN 'Yes'
--             ELSE 'No'
--         END 
--     INTO emp_exists 
--     FROM dual;
    
--     DBMS_OUTPUT.PUT_LINE('Employee Exists: ' || emp_exists);
-- END;
-- /

-- 11. Selecting Employee with Highest Salary

-- DECLARE
--     emp_name VARCHAR2(50);
-- BEGIN
--     SELECT first_name INTO emp_name FROM HR.employees 
--     WHERE salary = (SELECT MAX(salary) FROM HR.employees);
--     DBMS_OUTPUT.PUT_LINE('Highest Paid Employee: ' || emp_name);
-- END;
-- /

-- 12. Fetching Department Name

-- DECLARE
--     dept_name VARCHAR2(50);
-- BEGIN
--     SELECT department_name INTO dept_name FROM HR.departments WHERE department_id = 10;
--     DBMS_OUTPUT.PUT_LINE('Department: ' || dept_name);
-- END;
-- /

-- 13. Fetching Employee Count in a Department

-- DECLARE
--     emp_count NUMBER;
-- BEGIN
--     SELECT COUNT(*) INTO emp_count FROM HR.employees WHERE department_id = 20;
--     DBMS_OUTPUT.PUT_LINE('Employees in Department 20: ' || emp_count);
-- END;
-- /

-- 14. Fetching Sum of All Salaries

-- DECLARE
--     total_salary NUMBER;
-- BEGIN
--     SELECT SUM(salary) INTO total_salary FROM HR.employees;
--     DBMS_OUTPUT.PUT_LINE('Total Salaries: ' || total_salary);
-- END;
-- /

-- 15. Fetching Employee Joining Date

-- DECLARE
--     hire_date DATE;
-- BEGIN
--     SELECT hire_date INTO hire_date FROM HR.employees WHERE employee_id = 107;
--     DBMS_OUTPUT.PUT_LINE('Employee Hire Date: ' || hire_date);
-- END;
-- /

-- 16. Selecting Second Highest Salary

-- DECLARE
--     second_highest_salary NUMBER;
-- BEGIN
--     SELECT DISTINCT salary INTO second_highest_salary FROM HR.employees 
--     WHERE salary < (SELECT MAX(salary) FROM HR.employees) 
--     ORDER BY salary DESC FETCH FIRST 1 ROW ONLY;
    
--     DBMS_OUTPUT.PUT_LINE('Second Highest Salary: ' || second_highest_salary);
-- END;
-- /

-- 17. Selecting Employees with Same Salary as John

-- DECLARE
--     emp_count NUMBER;
-- BEGIN
--     SELECT COUNT(*) INTO emp_count FROM hr.employees 
--     WHERE salary = (SELECT salary FROM hr.employees WHERE first_name = 'John' and rownum=1);
    
--     DBMS_OUTPUT.PUT_LINE('Employees with John''s Salary: ' || emp_count);
-- END;
-- /

-- 18. Fetching Manager Name of an Employee

-- DECLARE
--     manager_name VARCHAR2(50);
-- BEGIN
--     SELECT first_name INTO manager_name FROM HR.employees WHERE employee_id = 
--         (SELECT manager_id FROM HR.employees WHERE employee_id = 110);
    
--     DBMS_OUTPUT.PUT_LINE('Manager: ' || manager_name);
-- END;
-- /

-- 19. Fetching Number of Employees Who Earn Above Average Salary

-- DECLARE
--     count_above_avg NUMBER;
-- BEGIN
--     SELECT COUNT(*) INTO count_above_avg FROM HR.employees 
--     WHERE salary > (SELECT AVG(salary) FROM HR.employees);
    
--     DBMS_OUTPUT.PUT_LINE('Employees Earning Above Average: ' || count_above_avg);
-- END;
-- /

-- 20. Fetching Employee Name and Role

-- DECLARE
--     emp_name VARCHAR2(50);
--     emp_role VARCHAR2(50);
-- BEGIN
--     SELECT e.first_name, j.job_title INTO emp_name, emp_role FROM HR.employees e
--     join hr.jobs j on j.job_id = e.job_id
--     WHERE e.employee_id = 112;
--     DBMS_OUTPUT.PUT_LINE('Employee: ' || emp_name || ', Role: ' || emp_role);
-- END;
-- /

